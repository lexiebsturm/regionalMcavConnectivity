ggsave("../figures/fig4Updated.png", plot = combinedViolinPlots, width = 60, height = 20, units = "cm", dpi = 300)
clusterByDepth= ggplot(data=k4Admix, aes(x = dominantCluster, y = depthM, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = min(depthM) - 4, label = label1), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
scale_y_reverse()+
annotate("rect", xmin = -Inf, xmax = Inf, ymin = 30, ymax = Inf, fill = "gray80", alpha = 0.3)+
annotate(geom = "text", x = 0.9, y =80, label = bquote(italic("F")~" = "~.(dF1)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Depth (m)") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByDepth
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLatAov = welch_anova_test(lat ~ dominantCluster, data = k4Admix)
dF2 = clusterLatAov$statistic[[1]]
clusterLatPH = games_howell_test(lat ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label2 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "AC",
dominantCluster == "cluster3" ~ "AD",
dominantCluster == "cluster4" ~ "AC",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLat=ggplot(k4Admix, aes(x = dominantCluster, y = lat, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = max(lat) + 2, label = label2), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
#scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
scale_y_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = 0.9, y =15, label = bquote(italic("F")~" = "~.(dF2)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Latitude") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByLat
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLonAov = welch_anova_test(lon ~ dominantCluster, data = k4Admix)
dF3 = clusterLonAov$statistic[[1]]
clusterLonPH = games_howell_test(lon ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label3 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "C",
dominantCluster == "cluster3" ~ "D",
dominantCluster == "cluster4" ~ "C",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLon=ggplot(k4Admix, aes(x = lon, y = factor(dominantCluster, levels = c("cluster4", "cluster3","cluster2","cluster1","admixed")), fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = max(lon) + 2, y = dominantCluster, label = label3), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1, labels = c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5, show.legend = FALSE) +
scale_y_discrete(labels = c("Yellow", "Green", "Blue", "Purple", "Admixed")) +
scale_x_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = -91.5, y =0.6, label = bquote(italic("F")~" = "~.(dF3)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
#scale_y_reverse()+
labs(x = "Longitude", y = "", fill = "Dominant Cluster") +
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.title.x=element_text(size=16),
axis.text.x=element_text(size=16),
legend.title=element_text(size=20),
legend.text=element_text(size=16))
clusterByLon
combinedViolinPlots=clusterByDepth + clusterByLat + clusterByLon
combinedViolinPlots= combinedViolinPlots + plot_annotation(tag_levels = 'A')
ggsave("../figures/fig4Updated.png", plot = combinedViolinPlots, width = 60, height = 20, units = "cm", dpi = 300)
clusterByLat=ggplot(k4Admix, aes(x = dominantCluster, y = lat, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = max(lat) + 2, label = label2), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
#scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
scale_y_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = 1, y =15, label = bquote(italic("F")~" = "~.(dF2)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Latitude") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByLat
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLonAov = welch_anova_test(lon ~ dominantCluster, data = k4Admix)
dF3 = clusterLonAov$statistic[[1]]
clusterLonPH = games_howell_test(lon ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label3 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "C",
dominantCluster == "cluster3" ~ "D",
dominantCluster == "cluster4" ~ "C",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLon=ggplot(k4Admix, aes(x = lon, y = factor(dominantCluster, levels = c("cluster4", "cluster3","cluster2","cluster1","admixed")), fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = max(lon) + 2, y = dominantCluster, label = label3), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1, labels = c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5, show.legend = FALSE) +
scale_y_discrete(labels = c("Yellow", "Green", "Blue", "Purple", "Admixed")) +
scale_x_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = -91.5, y =0.6, label = bquote(italic("F")~" = "~.(dF3)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
#scale_y_reverse()+
labs(x = "Longitude", y = "", fill = "Dominant Cluster") +
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.title.x=element_text(size=16),
axis.text.x=element_text(size=16),
legend.title=element_text(size=20),
legend.text=element_text(size=16))
clusterByLon
combinedViolinPlots=clusterByDepth + clusterByLat + clusterByLon
combinedViolinPlots= combinedViolinPlots + plot_annotation(tag_levels = 'A')
ggsave("../figures/fig4Updated.png", plot = combinedViolinPlots, width = 60, height = 20, units = "cm", dpi = 300)
clusterByDepth= ggplot(data=k4Admix, aes(x = dominantCluster, y = depthM, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = min(depthM) - 4, label = label1), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
scale_y_reverse()+
annotate("rect", xmin = -Inf, xmax = Inf, ymin = 30, ymax = Inf, fill = "gray80", alpha = 0.3)+
annotate(geom = "text", x = 5, y =80, label = bquote(italic("F")~" = "~.(dF1)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Depth (m)") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByDepth
clusterByDepth= ggplot(data=k4Admix, aes(x = dominantCluster, y = depthM, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = min(depthM) - 4, label = label1), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
scale_y_reverse()+
annotate("rect", xmin = -Inf, xmax = Inf, ymin = 30, ymax = Inf, fill = "gray80", alpha = 0.3)+
annotate(geom = "text", x = 2, y =80, label = bquote(italic("F")~" = "~.(dF1)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Depth (m)") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByDepth
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLatAov = welch_anova_test(lat ~ dominantCluster, data = k4Admix)
dF2 = clusterLatAov$statistic[[1]]
clusterLatPH = games_howell_test(lat ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label2 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "AC",
dominantCluster == "cluster3" ~ "AD",
dominantCluster == "cluster4" ~ "AC",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLat=ggplot(k4Admix, aes(x = dominantCluster, y = lat, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = max(lat) + 2, label = label2), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
#scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
scale_y_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = 1, y =15, label = bquote(italic("F")~" = "~.(dF2)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Latitude") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByLat
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLonAov = welch_anova_test(lon ~ dominantCluster, data = k4Admix)
dF3 = clusterLonAov$statistic[[1]]
clusterLonPH = games_howell_test(lon ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label3 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "C",
dominantCluster == "cluster3" ~ "D",
dominantCluster == "cluster4" ~ "C",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLon=ggplot(k4Admix, aes(x = lon, y = factor(dominantCluster, levels = c("cluster4", "cluster3","cluster2","cluster1","admixed")), fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = max(lon) + 2, y = dominantCluster, label = label3), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1, labels = c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5, show.legend = FALSE) +
scale_y_discrete(labels = c("Yellow", "Green", "Blue", "Purple", "Admixed")) +
scale_x_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = -91.5, y =0.6, label = bquote(italic("F")~" = "~.(dF3)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
#scale_y_reverse()+
labs(x = "Longitude", y = "", fill = "Dominant Cluster") +
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.title.x=element_text(size=16),
axis.text.x=element_text(size=16),
legend.title=element_text(size=20),
legend.text=element_text(size=16))
clusterByLon
combinedViolinPlots=clusterByDepth + clusterByLat + clusterByLon
combinedViolinPlots= combinedViolinPlots + plot_annotation(tag_levels = 'A')
ggsave("../figures/fig4Updated.png", plot = combinedViolinPlots, width = 60, height = 20, units = "cm", dpi = 300)
clusterByDepth= ggplot(data=k4Admix, aes(x = dominantCluster, y = depthM, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = min(depthM) - 4, label = label1), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
scale_y_reverse()+
annotate("rect", xmin = -Inf, xmax = Inf, ymin = 30, ymax = Inf, fill = "gray80", alpha = 0.3)+
annotate(geom = "text", x = 1.2, y =80, label = bquote(italic("F")~" = "~.(dF1)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Depth (m)") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByDepth
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLatAov = welch_anova_test(lat ~ dominantCluster, data = k4Admix)
dF2 = clusterLatAov$statistic[[1]]
clusterLatPH = games_howell_test(lat ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label2 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "AC",
dominantCluster == "cluster3" ~ "AD",
dominantCluster == "cluster4" ~ "AC",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLat=ggplot(k4Admix, aes(x = dominantCluster, y = lat, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = max(lat) + 2, label = label2), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
#scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
scale_y_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = 1, y =15, label = bquote(italic("F")~" = "~.(dF2)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Latitude") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByLat
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLonAov = welch_anova_test(lon ~ dominantCluster, data = k4Admix)
dF3 = clusterLonAov$statistic[[1]]
clusterLonPH = games_howell_test(lon ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label3 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "C",
dominantCluster == "cluster3" ~ "D",
dominantCluster == "cluster4" ~ "C",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLon=ggplot(k4Admix, aes(x = lon, y = factor(dominantCluster, levels = c("cluster4", "cluster3","cluster2","cluster1","admixed")), fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = max(lon) + 2, y = dominantCluster, label = label3), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1, labels = c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5, show.legend = FALSE) +
scale_y_discrete(labels = c("Yellow", "Green", "Blue", "Purple", "Admixed")) +
scale_x_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = -91.5, y =0.6, label = bquote(italic("F")~" = "~.(dF3)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
#scale_y_reverse()+
labs(x = "Longitude", y = "", fill = "Dominant Cluster") +
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.title.x=element_text(size=16),
axis.text.x=element_text(size=16),
legend.title=element_text(size=20),
legend.text=element_text(size=16))
clusterByLon
combinedViolinPlots=clusterByDepth + clusterByLat + clusterByLon
combinedViolinPlots= combinedViolinPlots + plot_annotation(tag_levels = 'A')
ggsave("../figures/fig4Updated.png", plot = combinedViolinPlots, width = 60, height = 20, units = "cm", dpi = 300)
clusterByDepth= ggplot(data=k4Admix, aes(x = dominantCluster, y = depthM, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = min(depthM) - 4, label = label1), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
scale_y_reverse()+
annotate("rect", xmin = -Inf, xmax = Inf, ymin = 30, ymax = Inf, fill = "gray80", alpha = 0.3)+
annotate(geom = "text", x = 1.3, y =80, label = bquote(italic("F")~" = "~.(dF1)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Depth (m)") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByDepth
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLatAov = welch_anova_test(lat ~ dominantCluster, data = k4Admix)
dF2 = clusterLatAov$statistic[[1]]
clusterLatPH = games_howell_test(lat ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label2 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "AC",
dominantCluster == "cluster3" ~ "AD",
dominantCluster == "cluster4" ~ "AC",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLat=ggplot(k4Admix, aes(x = dominantCluster, y = lat, fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = dominantCluster, y = max(lat) + 2, label = label2), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1)+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5) +
#scale_x_discrete(labels=c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
scale_y_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = 1.3, y =15, label = bquote(italic("F")~" = "~.(dF2)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
labs(x = "", y = "Latitude") +
theme_minimal()+
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.y=element_text(size=16),
axis.text.y=element_text(size=16))
clusterByLat
leveneTest(lm(lat ~ dominantCluster, data = k4Admix))
clusterLonAov = welch_anova_test(lon ~ dominantCluster, data = k4Admix)
dF3 = clusterLonAov$statistic[[1]]
clusterLonPH = games_howell_test(lon ~ dominantCluster, data = k4Admix, conf.level = 0.95) %>% as.data.frame()
k4Admix <- k4Admix %>%
mutate(label3 = case_when(
dominantCluster == "admixed" ~ "A",
dominantCluster == "cluster1" ~ "AB",
dominantCluster == "cluster2" ~ "C",
dominantCluster == "cluster3" ~ "D",
dominantCluster == "cluster4" ~ "C",
TRUE ~ NA_character_  # Handle other cases (if any)
))
clusterByLon=ggplot(k4Admix, aes(x = lon, y = factor(dominantCluster, levels = c("cluster4", "cluster3","cluster2","cluster1","admixed")), fill = dominantCluster)) +
geom_violin() +
geom_text(data = k4Admix, aes(x = max(lon) + 2, y = dominantCluster, label = label3), size = 5, fontface = "bold") +
scale_fill_manual(values = colPalAdmix1, labels = c("Admixed", "Purple", "Blue", "Green", "Yellow"))+
geom_point(position = position_jitter(height = 0.1), alpha = 0.5, show.legend = FALSE) +
scale_y_discrete(labels = c("Yellow", "Green", "Blue", "Purple", "Admixed")) +
scale_x_continuous(labels = ~ paste0(.x, "\u00B0"))+
annotate(geom = "text", x = -91, y =0.6, label = bquote(italic("F")~" = "~.(dF3)*"; "~italic("p")~" < 0.001"), size = 5, fontface = "bold") +
#scale_y_reverse()+
labs(x = "Longitude", y = "", fill = "Dominant Cluster") +
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.title.x=element_text(size=16),
axis.text.x=element_text(size=16),
legend.title=element_text(size=20),
legend.text=element_text(size=16))
clusterByLon
combinedViolinPlots=clusterByDepth + clusterByLat + clusterByLon
combinedViolinPlots= combinedViolinPlots + plot_annotation(tag_levels = 'A')
ggsave("../figures/fig4Updated.png", plot = combinedViolinPlots, width = 60, height = 20, units = "cm", dpi = 300)
anova(rdaS, perm=999)
RsquareAdj(rda)
Sel$anova
head(envData)
envData=envData%>%dplyr::select(-BO22_phosphatemean_ss, -MEM8, -MEM11)
head(envData)
rdaS<- rda(ibs , envData[,c(3, 7:ncol(envData))])
RsquareAdj(rdaS)
anova(rdaS, perm=999)
smry=summary(rdaS, scaling=1)
smry$sites
smry$biplot
summary(eigenvals(rdaS, model = "constrained"))
envSummary=envData %>% dplyr::select(-sample) %>% group_by(region, depthZone, lat, lon) %>% summarise_all(mean)
write.csv(envSummary, "../data/envSummary.csv")
model = envData %>% dplyr::select("depth" = depthM,
"light_attenuation"=BO22_damean,
"calcite" = BO22_calcite,
"current_velocity" = BO22_curvelmean_ss, MEM1, MEM2, MEM3, MEM4, MEM5, MEM6, MEM7, MEM9, MEM10)
regionalDbrda = dbrda(snpMa ~ depth + light_attenuation + calcite + current_velocity + MEM1+ MEM2+ MEM3+ MEM4+ MEM5+ MEM6+ MEM7+ MEM9+ MEM10, model)
regionalRdaVarTotal = round(regionalDbrda$CA$eig/sum(regionalDbrda$CA$eig)*100, 1)
head(regionalRdaVarTotal)
regionalRdaVarFitted = round(regionalDbrda$CCA$eig/sum(regionalDbrda$CCA$eig)*100, 1)
head(regionalRdaVarFitted)
regionalRdaPoints = as.data.frame(scores(regionalDbrda)$sites)
rdaI2P = read.csv("../data/regionalInds2popsNoClones.csv")
regionalRdaPoints$sample = rdaI2P$sample
head(regionalRdaPoints)
regionalDbrdaData1 = rdaI2P %>% left_join(regionalRdaPoints)
#%>% cbind(K = dapc1$grp)
head(regionalDbrdaData1)
tail(regionalDbrdaData1)
envLoad = as.data.frame(regionalDbrda$CCA$biplot)
envLoad$var = c("depth", "light\nattenuation", "calcite", "current\nvelocity", "1", "2", "3", "4", "5", "6", "7", "9", "10")
regionalDbrdaData = merge(regionalDbrdaData1, aggregate(cbind(mean.x = dbRDA1, mean.y = dbRDA2)~regionDepth, regionalDbrdaData1, mean), by="regionDepth")
regionalDbrdaData$depthZone = factor(regionalDbrdaData$depthZone)
regionalDbrdaData$depthZone = factor(regionalDbrdaData$depthZone, levels(regionalDbrdaData$depthZone)[c(2,1)])
regionalDbrdaData$region = factor(regionalDbrdaData$region)
regionalDbrdaData$region = factor(regionalDbrdaData$region, levels(regionalDbrdaData$region)[c(7, 4, 3, 6, 2, 5, 8, 1)])
head(regionalDbrdaData)
colPal = c("#FC6279", "#FFA58BFF",  "#FFDE8BFF", "#20DE8BFF", "#94D0FFFF", "#966BFFFF", "slateblue4", "#FF6AD5FF")
regionalDbrdaPlotA = ggplot() +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
geom_point(data = regionalDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = region, shape = depthZone),
size = 2, stroke = NA, alpha = 0.5, show.legend = FALSE) +
scale_shape_manual(values = c(24,25), name = "Depth Zone") +
# geom_segment(data = regionalDbrdaData, aes(x = mean.x, y = mean.y, xend = dbRDA1, yend = dbRDA2, color = pop), size = 0.5, alpha = 0.5) +
#geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2, linetype = varType), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65) +
#scale_linetype_manual(values = c("spatial" = "solid", "environmental" = "dashed"), name = "Variable Type") +
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65) +
scale_linetype_manual(values = c("spatial" = "solid", "environmental" = "dashed"), name = "Variable Type") +
geom_text_repel(data = envLoad, aes(x = dbRDA1, y = dbRDA2, label = var), color = "black", size = 3) +
geom_point(data = regionalDbrdaData, aes(x = mean.x, y = mean.y, fill = region, shape = depthZone),
size = 5, color = "black") + #population centroids indicated by triangles
scale_fill_manual(values = colPal, name = "Site") +
scale_color_manual(values = colPal, name = "Site") +
xlab(paste ("dbRDA 1 (", regionalRdaVarFitted[1],"%)", sep = "")) + #Prints percent variation explained by first axis
ylab(paste ("dbRDA 2 (", regionalRdaVarFitted[2],"%)", sep = "")) + #Prints percent variation explained by second axis
guides(shape = guide_legend(override.aes = list(size = 3.5, stroke = 0.5, alpha = 0.7), order = 2), fill = guide_legend(override.aes = list(shape = 22, size = 5, color = NA, alpha = NA), order = 1))+
theme_bw()
regionalDbrdaPlot = regionalDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title=element_text(color="black"),
legend.text=element_text(color="black"),
legend.background=element_blank(),
legend.key=element_blank(),
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
plot.background =element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
regionalDbrdaPlot
ggsave("../figures/dbRDAUpdated.tiff", plot = regionalDbrdaPlot, height = 5, width = 7, units = "in", dpi = 300)
bayesAss = read.delim("../data/ba3TraceFiles/BA3trace12.txt") %>% filter(State > 9000000) %>% dplyr::select(-State, -LogProb, -X)
baMean = bayesAss %>% summarise(across(everything(), list(mean))) %>% t() %>% as_tibble() %>% rename(., mean=V1) %>% mutate(pops = colnames(bayesAss))
baSumm = bayesAss %>% summarise(across(everything(), list(median))) %>% t() %>% as.data.frame() %>% rename(., median=V1) %>% mutate(pops = baMean$pops, mean = round(baMean$mean, 3)) %>% relocate(median, .after = mean)
baSumm$median = round(baSumm$median, 3)
#Make sure teachingdemos package is installed
baHpd =as.data.frame(t(sapply(bayesAss, emp.hpd)))
colnames(baHpd) = c("hpdLow", "hpdHigh")
baHpd$pops = rownames(baHpd)
ESS = as.data.frame(sapply(bayesAss, ESS))
colnames(ESS) = "ESS"
baSumm = baSumm %>% left_join(baHpd)
baSumm$hpdLow = round(baSumm$hpdLow, 3)
baSumm$hpdHigh = round(baSumm$hpdHigh, 3)
baSumm$ESS = ESS$ESS
popi = rep(c("BLZ\nShallow", "BLZ\nMesophotic", "CUBA\nMesophotic", "CUBA\nShallow", "DRT\nMesophotic", "DRT\nShallow", "FK\nShallow", "FK\nMesophotic", "SGOM\nShallow", "SGOM\nMesophotic", "NWGOM\nMesophotic", "NWGOM\nShallow", "PRG\nMesophotic", "SEFL\nShallow"), each = 14)
popj = rep(c("BLZ\nShallow", "BLZ\nMesophotic", "CUBA\nMesophotic", "CUBA\nShallow", "DRT\nMesophotic", "DRT\nShallow", "FK\nShallow", "FK\nMesophotic", "SGOM\nShallow", "SGOM\nMesophotic", "NWGOM\nMesophotic", "NWGOM\nShallow", "PRG\nMesophotic", "SEFL\nShallow"), times = 14)
baSumm = baSumm %>% mutate(pop.i = popi, pop.j = popj) %>% relocate(c(pop.i, pop.j), .after = pops) %>% dplyr::select(-pops)
baSumm$pop.i = factor(baSumm$pop.i)
levels(baSumm$pop.i)
baSumm$pop.i = factor(baSumm$pop.i, levels = levels(baSumm$pop.i)[c(12, 8, 6, 4, 10, 14, 2, 7, 5, 11, 3, 9, 13, 1)])
baSumm$pop.j = factor(baSumm$pop.j)
baSumm$pop.j = factor(baSumm$pop.j, levels = levels(baSumm$pop.j)[c(12, 8, 6, 4, 10, 14, 2, 7, 5, 11, 3, 9, 13, 1)])
baSumm$site.i = word(baSumm$pop.i, 1, sep = "\n")
baSumm$site.i = factor(baSumm$site.i)
levels(baSumm$site.i)
baSumm$site.i = factor(baSumm$site.i, levels = levels(baSumm$site.i)[c(7, 4, 3, 6, 2, 5, 8, 1)])
baSumm$site.j = word(baSumm$pop.j, 1, sep = "\n")
baSumm$site.j = factor(baSumm$site.j)
baSumm$site.j = factor(baSumm$site.j, levels = levels(baSumm$site.j)[c(7, 4, 3, 6, 2, 5, 8, 1)])
baSumm$depth.i = word(baSumm$pop.i, 2, sep = "\n")
baSumm$depth.i = factor(baSumm$depth.i)
baSumm$depth.i = factor(baSumm$depth.i, levels = levels(baSumm$depth.i)[c(2, 1)])
baSumm$depth.j = word(baSumm$pop.j, 2, sep = "\n")
baSumm$depth.j = factor(baSumm$depth.j)
baSumm$depth.j = factor(baSumm$depth.j, levels = levels(baSumm$depth.j)[c(2, 1)])
#All sites (excluding self retention)
baMeans = baSumm %>% filter(pop.i != pop.j) %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.))) %>% mutate(dataset = "Global")
#mesophotic sources
baMeans = baSumm %>% filter(pop.i != pop.j, depth.j == "Mesophotic") %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.))) %>% mutate(dataset = "Mesophotic Source") %>% bind_rows(baMeans, .)
#shallow sources
baMeans = baSumm %>% filter(pop.i != pop.j, depth.j == "Shallow") %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.))) %>% mutate(dataset = "Shallow Source") %>% bind_rows(baMeans, .)
#mesophotic sinks
baMeans = baSumm %>% filter(pop.i != pop.j, depth.i == "Mesophotic") %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.)))  %>% mutate(dataset = "Mesophotic Sink") %>% bind_rows(baMeans, .)
#shallow sinks
baMeans = baSumm %>% filter(pop.i != pop.j, depth.i == "Shallow") %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.)))  %>% mutate(dataset = "Shallow Sink") %>% bind_rows(baMeans, .)
#mesophotic -> shallow
baMeans = baSumm %>% filter(pop.i != pop.j, depth.j == "Mesophotic", depth.i == "Shallow") %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.))) %>% mutate(dataset = "Mesophotic -> Shallow") %>% bind_rows(baMeans, .)
#mesophotic -> mesophotic
baMeans = baSumm %>% filter(pop.i != pop.j, depth.j == "Mesophotic", depth.i == "Mesophotic") %>% summarise(mean = mean(mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.))) %>% mutate(dataset = "Mesophotic -> Mesophotic") %>% bind_rows(baMeans, .)
#shallow -> mesophotic
baMeans = baSumm %>% filter(pop.i != pop.j, depth.j == "Shallow", depth.i == "Mesophotic") %>% summarise(mean = mean(.$mean), sd = sd(.$mean), se = sd(.$mean)/sqrt(nrow(.))) %>% mutate(dataset = "Shallow -> Mesophotic") %>% bind_rows(baMeans, .)
#shallow -> shallow
baMeans = baSumm %>% filter(pop.i != pop.j, depth.j == "Shallow", depth.i == "Shallow") %>% summarise(mean = round(mean(.$mean), 3), sd = round(sd(.$mean), 3), se = round(sd(.$mean)/sqrt(nrow(.)), 3)) %>% mutate(dataset = paste("Shallow -> Shallow")) %>% bind_rows(baMeans, .) %>% relocate(dataset, .before = mean) %>% as.data.frame()
baMeans[,c(2:4)] = baMeans[,c(2:4)] %>% round(3)
baMeans
#MigrationPlot
baSumm$mean = sprintf('%.3f', baSumm$mean)
